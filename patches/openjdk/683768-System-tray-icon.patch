--- openjdk.orig/jdk/make/sun/xawt/mapfile-vers	2011-11-10 14:24:02.954504503 -0500
+++ openjdk/jdk/make/sun/xawt/mapfile-vers	2011-11-14 15:17:31.710505342 -0500
@@ -304,6 +304,8 @@
         Java_sun_awt_X11_XlibWrapper_XSynchronize;
         Java_java_awt_FileDialog_initIDs;
         Java_sun_awt_X11_XWindow_initIDs;
+        Java_sun_awt_X11_XWindowPeer_getLocalHostname;
+        Java_sun_awt_X11_XWindowPeer_getJvmPID;
 
         Java_sun_java2d_opengl_OGLContext_getOGLIdString;
         Java_sun_java2d_opengl_OGLMaskFill_maskFill;
--- openjdk.orig/jdk/src/solaris/classes/sun/awt/X11/XWindowPeer.java	2011-11-10 14:24:02.702508353 -0500
+++ openjdk/jdk/src/solaris/classes/sun/awt/X11/XWindowPeer.java	2011-11-14 15:17:31.735504849 -0500
@@ -199,11 +199,18 @@
         return name;
     }
 
+    private static native String getLocalHostname();
+    private static native int getJvmPID();
+    
     void postInit(XCreateWindowParams params) {
         super.postInit(params);
 
         // Init WM_PROTOCOLS atom
         initWMProtocols();
+        
+        // Set _NET_WM_PID and WM_CLIENT_MACHINE using this JVM
+        XAtom.get("WM_CLIENT_MACHINE").setProperty(getWindow(), getLocalHostname());
+        XAtom.get("_NET_WM_PID").setCard32Property(getWindow(), getJvmPID());
 
         // Set WM_TRANSIENT_FOR and group_leader
         Window t_window = (Window)target;
--- openjdk.orig/jdk/src/solaris/native/sun/xawt/XToolkit.c	2011-07-05 14:36:12.000000000 -0400
+++ openjdk/jdk/src/solaris/native/sun/xawt/XToolkit.c	2011-11-14 15:17:31.775504063 -0500
@@ -46,6 +46,8 @@
 #include "java_awt_SystemColor.h"
 #include "java_awt_TrayIcon.h"
 
+#include <unistd.h>
+
 uint32_t awt_NumLockMask = 0;
 Boolean  awt_ModLockIsShiftLock = False;
 
@@ -914,3 +916,38 @@
         AWT_UNLOCK();
     }
 }
+
+/*
+ * Class:     sun_awt_X11_XWindowPeer
+ * Method:    getJvmPID
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL Java_sun_awt_X11_XWindowPeer_getJvmPID
+(JNIEnv *env, jclass cls) 
+{
+    /* Return the JVM's PID. */
+    return getpid();
+}
+
+#ifndef HOST_NAME_MAX
+#define HOST_NAME_MAX 1024 /* Overestimated */
+#endif
+
+/*
+ * Class:     sun_awt_X11_XWindowPeer
+ * Method:    getLocalHostname
+ * Signature: ()Ljava/lang/String;
+ */
+JNIEXPORT jstring JNICALL Java_sun_awt_X11_XWindowPeer_getLocalHostname
+(JNIEnv *env, jclass cls) 
+{
+    /* Return the machine's FQDN. */
+    char hostname[HOST_NAME_MAX + 1];
+    if (gethostname(hostname, HOST_NAME_MAX + 1) == 0) {
+        hostname[HOST_NAME_MAX] = '\0';
+        jstring res = (*env)->NewStringUTF(env, hostname);
+        return res;
+    }
+
+    return (jstring)NULL;
+}
