# HG changeset patch
# User omajid
# Date 1284475538 14400
# Node ID 9216ec4e4c1443fe854872630aa8b3726523c0c9
# Parent  f4ad6e24e75db494a0308743b39a8f455a4b7d79
6979979: Rounding error in font sizes selected by the GTK Look and Feel
Summary: Use floating point font sizes
Reviewed-by: prr

diff -r f4ad6e24e75d -r 9216ec4e4c14 src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java
--- openjdk/jdk/src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java	Tue Oct 19 16:51:14 2010 -0700
+++ openjdk/jdk/src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java	Tue Sep 14 10:45:38 2010 -0400
@@ -148,11 +148,6 @@
          * case for it to be a problem the values would have to be different.
          * It also seems unlikely to arise except when a user explicitly
          * deletes the X resource database entry.
-         * 3) Because of rounding errors sizes may differ very slightly
-         * between JDK and GTK. To fix that would at the very least require
-         * Swing to specify floating pt font sizes.
-         * Eg "10 pts" for GTK at 96 dpi to get the same size at Java 2D's
-         * 72 dpi you'd need to specify exactly 13.33.
          * There also some other issues to be aware of for the future:
          * GTK specifies the Xft.dpi value as server-wide which when used
          * on systems with 2 distinct X screens with different physical DPI
@@ -195,11 +190,16 @@
         String fcFamilyLC = family.toLowerCase();
         if (FontManager.mapFcName(fcFamilyLC) != null) {
             /* family is a Fc/Pango logical font which we need to expand. */
-           return FontManager.getFontConfigFUIR(fcFamilyLC, style, size);
+            Font font =  FontManager.getFontConfigFUIR(fcFamilyLC, style, size);
+            font = font.deriveFont(style, (float)dsize);
+            return new FontUIResource(font);
         } else {
             /* It's a physical font which we will create with a fallback */
-            Font font = new FontUIResource(family, style, size);
-            return FontManager.getCompositeFontUIResource(font);
+            Font font = new Font(family, style, size);
+            /* a roundabout way to set the font size in floating points */
+            font = font.deriveFont(style, (float)dsize);
+            FontUIResource fuir = new FontUIResource(font);
+            return FontManager.getCompositeFontUIResource(fuir);
         }
     }
 
diff -r f4ad6e24e75d -r 9216ec4e4c14 src/share/classes/sun/font/FontManager.java
--- openjdk/jdk/src/share/classes/sun/font/FontManager.java	Tue Oct 19 16:51:14 2010 -0700
+++ openjdk/jdk/src/share/classes/sun/font/FontManager.java	Tue Sep 14 10:45:38 2010 -0400
@@ -431,8 +431,7 @@
      */
     public static FontUIResource getCompositeFontUIResource(Font font) {
 
-        FontUIResource fuir =
-            new FontUIResource(font.getName(),font.getStyle(),font.getSize());
+        FontUIResource fuir = new FontUIResource(font);
         Font2D font2D = getFont2D(font);
 
         if (!(font2D instanceof PhysicalFont)) {
