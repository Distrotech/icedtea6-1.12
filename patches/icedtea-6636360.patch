--- vtableStubs_sparc.cpp	2009-03-16 16:52:18.000000000 -0400
+++ openjdk/hotspot/src/cpu/sparc/vm/vtableStubs_sparc.cpp	2009-03-16 16:53:52.000000000 -0400
@@ -190,12 +190,16 @@
   // Compute itableMethodEntry and get methodOop(G5_method) and entrypoint(L0) for compiler
   const int method_offset = (itableMethodEntry::size() * wordSize * vtable_index) + itableMethodEntry::method_offset_in_bytes();
   __ add(G3_klassOop, L0, L1);
-  __ ld_ptr(L1, method_offset, G5_method);
+  if (__ is_simm13(method_offset)) {
+    __ ld_ptr(L1, method_offset, G5_method);
+  } else {
+    __ set(method_offset, G5_method);
+    __ ld_ptr(L1, G5_method, G5_method);
+  }
 
 #ifndef PRODUCT
   if (DebugVtables) {
     Label L01;
-    __ ld_ptr(L1, method_offset, G5_method);
     __ bpr(Assembler::rc_nz, false, Assembler::pt, G5_method, L01);
     __ delayed()->nop();
     __ stop("methodOop is null");
@@ -243,10 +247,8 @@
                         (UseCompressedOops ? 2*BytesPerInstWord : 0);
       return basic + slop;
     } else {
-      // save, ld, ld, sll, and, add, add, ld, cmp, br, add, ld, add, ld, ld, jmp, restore, sethi, jmpl, restore
-      const int basic = (20 LP64_ONLY(+ 6)) * BytesPerInstWord +
-                        // shift;add for load_klass
-                        (UseCompressedOops ? 2*BytesPerInstWord : 0);
+      // save, ld, ld, sll, and, add, add, ld, cmp, br, add, ld, add, sethi, add, ld, ld, jmp, restore, sethi, jmpl, restore
+      const int basic = (22 LP64_ONLY(+ 12)) * BytesPerInstWord; // worst case extra 6 bytes for each sethi in 64-bit mode
       return (basic + slop);
     }
   }
