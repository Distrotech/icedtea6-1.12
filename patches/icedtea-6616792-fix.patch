--- openjdk.orig/jdk/test/java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java	2010-04-15 09:35:54.000000000 +0200
+++ openjdk/jdk/test/java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java	2010-05-03 11:34:34.000000000 +0200
@@ -25,8 +25,10 @@
   @test
   @bug       6314575
   @summary   Tests that previosly focused owned window doesn't steal focus when an owner's component requests focus.
-  @author    Anton Tarasov: area=awt-focus
-  @run       applet ActualFocusedWindowBlockingTest.html
+  @author    Anton.Tarasov: area=awt.focus
+  @library   ../../regtesthelpers
+  @build     Util
+  @run       main ActualFocusedWindowBlockingTest
 */
 
 import java.awt.*;
@@ -35,9 +37,10 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.lang.reflect.InvocationTargetException;
 import sun.awt.SunToolkit;
+import test.java.awt.regtesthelpers.Util;
 
 public class ActualFocusedWindowBlockingTest extends Applet {
-    Robot robot;
+    Robot robot = Util.createRobot();
     Frame owner = new Frame("Owner Frame");
     Window win = new Window(owner);
     Frame frame = new Frame("Auxiliary Frame");
@@ -52,28 +55,12 @@
     }
 
     public void init() {
-        // Create instructions for the user here, as well as set up
-        // the environment -- set the layout manager, add buttons,
-        // etc.
-        this.setLayout (new BorderLayout ());
-        Sysout.createDialogWithInstructions(new String[]
-            {"Automatic test. Simply wait until it's done."});
-
-        if ("sun.awt.motif.MToolkit".equals(Toolkit.getDefaultToolkit().getClass().getName())) {
-            return;
-        }
-
         Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
                 public void eventDispatched(AWTEvent e) {
-                    Sysout.println("--> " + e);
+                    System.out.println("--> " + e);
                 }
             }, FocusEvent.FOCUS_EVENT_MASK | WindowEvent.WINDOW_FOCUS_EVENT_MASK);
 
-        try {
-            robot = new Robot();
-        } catch (AWTException e) {
-            throw new RuntimeException("Error: unable to create robot", e);
-        }
         owner.add(fButton);
         win.add(wButton);
         frame.add(aButton);
@@ -87,19 +74,18 @@
 
     public void start() {
         if ("sun.awt.motif.MToolkit".equals(Toolkit.getDefaultToolkit().getClass().getName())) {
-            Sysout.println("No testing on Motif. Test passed.");
+            System.out.println("No testing on Motif. Test passed.");
             return;
         }
 
-        Sysout.println("\nTest started:\n");
+        System.out.println("\nTest started:\n");
 
         // Test 1.
 
         clickOnCheckFocus(wButton);
-
         clickOnCheckFocus(aButton);
 
-        clickOn(fButton);
+        Util.clickOnComp(fButton, robot);
         if (!testFocused(fButton)) {
             throw new TestFailedException("The owner's component [" + fButton + "] couldn't be focused by click");
         }
@@ -107,11 +93,10 @@
         // Test 2.
 
         clickOnCheckFocus(wButton);
-
         clickOnCheckFocus(aButton);
 
         fButton.requestFocus();
-        realSync();
+        Util.waitForIdle(robot);
         if (!testFocused(fButton)) {
             throw new TestFailedException("The owner's component [" + fButton + "] couldn't be focused by request");
         }
@@ -119,19 +104,16 @@
         // Test 3.
 
         clickOnCheckFocus(wButton);
-
         clickOnCheckFocus(aButton);
-
         clickOnCheckFocus(fButton);
-
         clickOnCheckFocus(aButton);
 
-        clickOn(owner);
+        Util.clickOnTitle(owner, robot);
         if (!testFocused(fButton)) {
             throw new TestFailedException("The owner's component [" + fButton + "] couldn't be focused as the most recent focus owner");
         }
 
-        Sysout.println("Test passed.");
+        System.out.println("Test passed.");
     }
 
     void tuneAndShowWindows(Window[] arr) {
@@ -142,33 +124,18 @@
             w.setBackground(Color.blue);
             w.setVisible(true);
             y += 200;
-            realSync();
+            Util.waitForIdle(robot);
         }
     }
 
-    void clickOn(Component c) {
-        Sysout.println("Test: clicking " + c);
-
-        Point p = c.getLocationOnScreen();
-        Dimension d = c.getSize();
-
+    void clickOnCheckFocus(Component c) {
         if (c instanceof Frame) {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + ((Frame)c).getInsets().top/2);
-            Sysout.println((p.x + (int)(d.getWidth()/2)) + " " +  (p.y + ((Frame)c).getInsets().top/2));
+            Util.clickOnTitle((Frame)c, robot);
         } else {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + (int)(d.getHeight()/2));
+            Util.clickOnComp(c, robot);
         }
-        robot.mousePress(InputEvent.BUTTON1_MASK);
-        robot.delay(100);
-        robot.mouseRelease(InputEvent.BUTTON1_MASK);
-
-        realSync();
-    }
-
-    void clickOnCheckFocus(Component c) {
-        clickOn(c);
         if (!testFocused(c)) {
-            throw new RuntimeException("Error: [" + c + "] couldn't get focus by click.");
+            throw new TestErrorException(c + "couldn't get focus by click.");
         }
     }
 
@@ -177,157 +144,22 @@
             if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == c) {
                 return true;
             }
-            realSync();
+            Util.waitForIdle(robot);
         }
         return false;
     }
 
-    void realSync() {
-        ((SunToolkit)Toolkit.getDefaultToolkit()).realSync();
-    }
-
+    // Thrown when the behavior being verified is found wrong.
     class TestFailedException extends RuntimeException {
-        public TestFailedException(String cause) {
-            super("Test failed. " + cause);
-            Sysout.println(cause);
+        TestFailedException(String msg) {
+            super("Test failed: " + msg);
         }
     }
-}
-
-/****************************************************
- Standard Test Machinery
- DO NOT modify anything below -- it's a standard
-  chunk of code whose purpose is to make user
-  interaction uniform, and thereby make it simpler
-  to read and understand someone else's test.
- ****************************************************/
-
-/**
- This is part of the standard test machinery.
- It creates a dialog (with the instructions), and is the interface
-  for sending text messages to the user.
- To print the instructions, send an array of strings to Sysout.createDialog
-  WithInstructions method.  Put one line of instructions per array entry.
- To display a message for the tester to see, simply call Sysout.println
-  with the string to be displayed.
- This mimics System.out.println but works within the test harness as well
-  as standalone.
- */
-
-class Sysout
-{
-    static TestDialog dialog;
-
-    public static void createDialogWithInstructions( String[] instructions )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        dialog.printInstructions( instructions );
-        dialog.setLocation(500,0);
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-    public static void createDialog( )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        String[] defInstr = { "Instructions will appear here. ", "" } ;
-        dialog.printInstructions( defInstr );
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-
-    public static void printInstructions( String[] instructions )
-    {
-        dialog.printInstructions( instructions );
-    }
-
-
-    public static void println( String messageIn )
-    {
-        dialog.displayMessage( messageIn );
-    }
-
-}// Sysout  class
-
-/**
-  This is part of the standard test machinery.  It provides a place for the
-   test instructions to be displayed, and a place for interactive messages
-   to the user to be displayed.
-  To have the test instructions displayed, see Sysout.
-  To have a message to the user be displayed, see Sysout.
-  Do not call anything in this dialog directly.
-  */
-class TestDialog extends Dialog
-{
-
-    TextArea instructionsText;
-    TextArea messageText;
-    int maxStringLength = 80;
-
-    //DO NOT call this directly, go through Sysout
-    public TestDialog( Frame frame, String name )
-    {
-        super( frame, name );
-        int scrollBoth = TextArea.SCROLLBARS_BOTH;
-        instructionsText = new TextArea( "", 15, maxStringLength, scrollBoth );
-        add( "North", instructionsText );
-
-        messageText = new TextArea( "", 5, maxStringLength, scrollBoth );
-        add("Center", messageText);
-
-        pack();
-
-        setVisible(true);
-    }// TestDialog()
-
-    //DO NOT call this directly, go through Sysout
-    public void printInstructions( String[] instructions )
-    {
-        //Clear out any current instructions
-        instructionsText.setText( "" );
-
-        //Go down array of instruction strings
-
-        String printStr, remainingStr;
-        for( int i=0; i < instructions.length; i++ )
-        {
-            //chop up each into pieces maxSringLength long
-            remainingStr = instructions[ i ];
-            while( remainingStr.length() > 0 )
-            {
-                //if longer than max then chop off first max chars to print
-                if( remainingStr.length() >= maxStringLength )
-                {
-                    //Try to chop on a word boundary
-                    int posOfSpace = remainingStr.
-                        lastIndexOf( ' ', maxStringLength - 1 );
 
-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;
-
-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );
-                    remainingStr = remainingStr.substring( posOfSpace + 1 );
-                }
-                //else just print
-                else
-                {
-                    printStr = remainingStr;
-                    remainingStr = "";
-                }
-
-                instructionsText.append( printStr + "\n" );
-
-            }// while
-
-        }// for
-
-    }//printInstructions()
-
-    //DO NOT call this directly, go through Sysout
-    public void displayMessage( String messageIn )
-    {
-        messageText.append( messageIn + "\n" );
-        System.out.println(messageIn);
+    // Thrown when an error not related to the behavior being verified is encountered.
+    class TestErrorException extends RuntimeException {
+        TestErrorException(String msg) {
+            super("Unexpected error: " + msg);
+        }
     }
-
-}// TestDialog  class
+}
--- openjdk.orig/jdk/test/java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowRetaining.java	2010-04-15 09:35:54.000000000 +0200
+++ openjdk/jdk/test/java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowRetaining.java	2010-05-03 09:35:54.000000000 +0200
@@ -23,16 +23,19 @@
 
 /*
   @test
-  @bug 4823903
-  @summary Tests actual focused window retaining.
-  @author Anton Tarasov: area=awt.focus
-  @run applet ActualFocusedWindowRetaining.html
+  @bug      4823903
+  @summary  Tests actual focused window retaining.
+  @author   Anton.Tarasov: area=awt.focus
+  @library  ../../regtesthelpers
+  @build    Util
+  @run      main ActualFocusedWindowRetaining
 */
 
 import java.awt.*;
 import java.awt.event.*;
 import java.lang.reflect.*;
 import java.applet.*;
+import test.java.awt.regtesthelpers.Util;
 
 public class ActualFocusedWindowRetaining extends Applet {
     public static Frame frame = new Frame("Other Frame");
@@ -46,7 +49,7 @@
     public static Window window1 = new TestWindow(owner, otherButton2, testButton2, 800, 200);
     public static Window window2 = new TestWindow(owner, otherButton3, testButton3, 800, 300);
     public static int step;
-    public static Robot robot;
+    public static Robot robot = Util.createRobot();
 
     public static void main(String[] args) {
         ActualFocusedWindowRetaining a = new ActualFocusedWindowRetaining();
@@ -54,53 +57,25 @@
         a.start();
     }
 
-    public void init()
-    {
-        //Create instructions for the user here, as well as set up
-        // the environment -- set the layout manager, add buttons,
-        // etc.
-        this.setLayout (new BorderLayout ());
-
-        String[] instructions =
-        {
-            "This is an AUTOMATIC test",
-            "simply wait until it is done"
-        };
-        Sysout.createDialogWithInstructions( instructions );
-    }
-
-    public void start ()
-    {
-        if (Toolkit.getDefaultToolkit().getClass()
-                .getName().equals("sun.awt.motif.MToolkit")) {
-            Sysout.println("No testing on Motif.");
-            return;
-        }
-
-        try {
-            robot = new Robot();
-        } catch (AWTException e) {
-            throw new RuntimeException("Error: unable to create robot", e);
-        }
-
+    public void start () {
         Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
                 public void eventDispatched(AWTEvent e) {
                     Object src = e.getSource();
                     Class cls = src.getClass();
 
                     if (cls == TestWindow.class) {
-                        Sysout.println(e.paramString() + " on <" + (src == window1 ? "Window 1" : "Window 2") + ">");
+                        System.out.println(e.paramString() + " on <" + (src == window1 ? "Window 1" : "Window 2") + ">");
                     } else if (cls == Frame.class) {
-                        Sysout.println(e.paramString() + " on <" + ((Frame)src).getTitle() + ">");
+                        System.out.println(e.paramString() + " on <" + ((Frame)src).getTitle() + ">");
                     } else if (cls == Button.class) {
-                        Sysout.println(e.paramString() + " on <" + ((Button)src).getLabel() + ">");
+                        System.out.println(e.paramString() + " on <" + ((Button)src).getLabel() + ">");
                     } else {
-                        Sysout.println(e.paramString() + " on <Non-testing component>");
+                        System.out.println(e.paramString() + " on <Non-testing component>");
                     }
                 }
             }, AWTEvent.WINDOW_EVENT_MASK | AWTEvent.WINDOW_FOCUS_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK);
 
-        setSize (200,200);
+        setSize (500, 200);
         setVisible(true);
         validate();
 
@@ -117,15 +92,15 @@
         owner.setSize(new Dimension(400, 100));
         owner.setVisible(true);
         owner.toFront();
-        waitTillShown(owner);
+        Util.waitTillShown(owner);
 
         window1.setVisible(true);
         window2.setVisible(true);
         window1.toFront();
         window2.toFront();
         // Wait longer...
-        waitTillShown(window1);
-        waitTillShown(window2);
+        Util.waitTillShown(window1);
+        Util.waitTillShown(window2);
 
         test();
 
@@ -134,85 +109,39 @@
     }
 
     public void test() {
-
         Button[] butArr = new Button[] {testButton3, testButton2, testButton1};
         Window[] winArr = new Window[] {window2, window1, owner};
 
         step = 1;
         for (int i = 0; i < 3; i++) {
-            clickOnCheckFocusOwner(butArr[i]);
-            clickOnCheckFocusedWindow(frame);
-            clickOn(owner);
-            if (!checkFocusedWindow(winArr[i])) {
-                stopTest("Test failed: actual focused window didn't get a focus");
-            }
-            if (!checkFocusOwner(butArr[i])) {
-                stopTest("Test failed: actual focus owner didn't get a focus");
-            }
+            clickInSeriesCheckFocus(null, butArr[i], frame);
+            clickOwnerCheckFocus(winArr[i], butArr[i]);
             step++;
         }
 
         step = 4;
-        clickOnCheckFocusOwner(testButton3);
-        clickOnCheckFocusOwner(testButton1);
-        clickOnCheckFocusedWindow(frame);
-        clickOn(owner);
-        if (!checkFocusedWindow(owner)) {
-            stopTest("Test failed: actual focused window didn't get a focus");
-        }
-        if (!checkFocusOwner(testButton1)) {
-            stopTest("Test failed: actual focus owner didn't get a focus");
-        }
+        clickInSeriesCheckFocus(testButton3, testButton1, frame);
+        clickOwnerCheckFocus(owner, testButton1);
 
         step = 5;
-        clickOnCheckFocusOwner(testButton3);
-        clickOnCheckFocusOwner(testButton2);
-        clickOnCheckFocusedWindow(frame);
-        clickOn(owner);
-        if (!checkFocusedWindow(window1)) {
-            stopTest("Test failed: actual focused window didn't get a focus");
-        }
-        if (!checkFocusOwner(testButton2)) {
-            stopTest("Test failed: actual focus owner didn't get a focus");
-        }
+        clickInSeriesCheckFocus(testButton3, testButton2, frame);
+        clickOwnerCheckFocus(window1, testButton2);
 
         step = 6;
-        clickOnCheckFocusOwner(testButton1);
-        clickOnCheckFocusOwner(testButton2);
-        clickOnCheckFocusedWindow(frame);
-        clickOn(owner);
-        if (!checkFocusedWindow(window1)) {
-            stopTest("Test failed: actual focused window didn't get a focus");
-        }
-        if (!checkFocusOwner(testButton2)) {
-            stopTest("Test failed: actual focus owner didn't get a focus");
-        }
+        clickInSeriesCheckFocus(testButton1, testButton2, frame);
+        clickOwnerCheckFocus(window1, testButton2);
 
         step = 7;
-        clickOnCheckFocusOwner(testButton1);
-        clickOnCheckFocusOwner(testButton2);
-        clickOnCheckFocusedWindow(frame);
+        clickInSeriesCheckFocus(testButton1, testButton2, frame);
         window1.setVisible(false);
-        clickOn(owner);
-        if (!checkFocusedWindow(owner)) {
-            stopTest("Test failed: actual focused window didn't get a focus");
-        }
-        if (!checkFocusOwner(testButton1)) {
-            stopTest("Test failed: actual focus owner didn't get a focus");
-        }
+        Util.waitForIdle(robot);
+        clickOwnerCheckFocus(owner, testButton1);
 
         step = 8;
         window1.setVisible(true);
-        waitTillShown(window1);
-        clickOnCheckFocusOwner(testButton2);
-        clickOnCheckFocusedWindow(frame);
-        clickOn(owner);
-        if (!checkFocusedWindow(window1)) {
-            stopTest("Test failed: actual focused window didn't get a focus");
-        }
-        if (!checkFocusOwner(testButton2)) {
-            stopTest("Test failed: actual focus owner didn't get a focus");
-        }
+        Util.waitTillShown(window1);
+        clickInSeriesCheckFocus(null, testButton2, frame);
+        clickOwnerCheckFocus(window1, testButton2);
     }
 
     boolean checkFocusOwner(Component comp) {
@@ -223,53 +152,43 @@
         return (win == KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow());
     }
 
-    void waitTillShown(Component c) {
-        ((sun.awt.SunToolkit) Toolkit.getDefaultToolkit()).realSync();
-    }
+    void clickOwnerCheckFocus(Window focusedWindow, Component focusedComp) {
+        Util.clickOnTitle(owner, robot);
+        robot.delay(500);
 
-    void clickOnCheckFocusOwner(Component c) {
-        clickOn(c);
-        if (!checkFocusOwner(c)) {
-            stopTest("Error: can't bring a focus on Component by clicking on it");
+        if (!checkFocusedWindow(focusedWindow)) {
+            stopTest("Test failed: actual focused window didn't get a focus");
         }
-    }
-
-    void clickOnCheckFocusedWindow(Frame f) {
-        clickOn(f);
-        if (!checkFocusedWindow(f)) {
-            stopTest("Error: can't bring a focus on Frame by clicking on it");
+        if (!checkFocusOwner(focusedComp)) {
+            stopTest("Test failed: actual focus owner didn't get a focus");
         }
     }
 
-    void clickOn(Component c)
-    {
-        Point p = c.getLocationOnScreen();
-        Dimension d = c.getSize();
-
-        if (c instanceof Frame) {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + ((Frame)c).getInsets().top/2);
-        } else {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + (int)(d.getHeight()/2));
+    void clickInSeriesCheckFocus(Component comp1, Component comp2, Frame frame) {
+        if (comp1 != null) {
+            clickOnCheckFocusOwner(comp1);
         }
+        if (comp2 != null) {
+            clickOnCheckFocusOwner(comp2);
+        }
+        clickOnCheckFocusedWindow(frame);
+    }
 
-        pause(100);
-        robot.mousePress(InputEvent.BUTTON1_MASK);
-        pause(100);
-        robot.mouseRelease(InputEvent.BUTTON1_MASK);
+    void clickOnCheckFocusOwner(Component c) {
+        Util.clickOnComp(c, robot);
+        robot.delay(500);
 
-        waitForIdle();
+        if (!checkFocusOwner(c)) {
+            stopTest("Error: can't bring a focus on Component by clicking on it");
+        }
     }
 
-    void waitForIdle() {
-        ((sun.awt.SunToolkit) Toolkit.getDefaultToolkit()).realSync();
-    }
+    void clickOnCheckFocusedWindow(Frame f) {
+        Util.clickOnTitle(f, robot);
+        robot.delay(500);
 
-    void pause(int msec) {
-        try {
-            Thread.sleep(msec);
-        } catch (InterruptedException e) {
-            Sysout.println("pause: non-fatal exception caught:");
-            e.printStackTrace();
+        if (!checkFocusedWindow(f)) {
+            stopTest("Error: can't bring a focus on Frame by clicking on it");
         }
     }
 
@@ -290,141 +209,3 @@
         setBackground(Color.green);
     }
 }
-
-
-/****************************************************
- Standard Test Machinery
- DO NOT modify anything below -- it's a standard
-  chunk of code whose purpose is to make user
-  interaction uniform, and thereby make it simpler
-  to read and understand someone else's test.
- ****************************************************/
-
-/**
- This is part of the standard test machinery.
- It creates a dialog (with the instructions), and is the interface
-  for sending text messages to the user.
- To print the instructions, send an array of strings to Sysout.createDialog
-  WithInstructions method.  Put one line of instructions per array entry.
- To display a message for the tester to see, simply call Sysout.println
-  with the string to be displayed.
- This mimics System.out.println but works within the test harness as well
-  as standalone.
- */
-
-class Sysout
-{
-    private static TestDialog dialog;
-
-    public static void createDialogWithInstructions( String[] instructions )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        dialog.printInstructions( instructions );
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-    public static void createDialog( )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        String[] defInstr = { "Instructions will appear here. ", "" } ;
-        dialog.printInstructions( defInstr );
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-
-    public static void printInstructions( String[] instructions )
-    {
-        dialog.printInstructions( instructions );
-    }
-
-
-    public static void println( String messageIn )
-    {
-        dialog.displayMessage( messageIn );
-    }
-
-}// Sysout  class
-
-/**
-  This is part of the standard test machinery.  It provides a place for the
-   test instructions to be displayed, and a place for interactive messages
-   to the user to be displayed.
-  To have the test instructions displayed, see Sysout.
-  To have a message to the user be displayed, see Sysout.
-  Do not call anything in this dialog directly.
-  */
-class TestDialog extends Dialog
-{
-
-    TextArea instructionsText;
-    TextArea messageText;
-    int maxStringLength = 80;
-
-    //DO NOT call this directly, go through Sysout
-    public TestDialog( Frame frame, String name )
-    {
-        super( frame, name );
-        int scrollBoth = TextArea.SCROLLBARS_BOTH;
-        instructionsText = new TextArea( "", 15, maxStringLength, scrollBoth );
-        add( "North", instructionsText );
-
-        messageText = new TextArea( "", 5, maxStringLength, scrollBoth );
-        add("Center", messageText);
-
-        pack();
-
-        setVisible(true);
-    }// TestDialog()
-
-    //DO NOT call this directly, go through Sysout
-    public void printInstructions( String[] instructions )
-    {
-        //Clear out any current instructions
-        instructionsText.setText( "" );
-
-        //Go down array of instruction strings
-
-        String printStr, remainingStr;
-        for( int i=0; i < instructions.length; i++ )
-        {
-            //chop up each into pieces maxSringLength long
-            remainingStr = instructions[ i ];
-            while( remainingStr.length() > 0 )
-            {
-                //if longer than max then chop off first max chars to print
-                if( remainingStr.length() >= maxStringLength )
-                {
-                    //Try to chop on a word boundary
-                    int posOfSpace = remainingStr.
-                        lastIndexOf( ' ', maxStringLength - 1 );
-
-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;
-
-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );
-                    remainingStr = remainingStr.substring( posOfSpace + 1 );
-                }
-                //else just print
-                else
-                {
-                    printStr = remainingStr;
-                    remainingStr = "";
-                }
-
-                instructionsText.append( printStr + "\n" );
-
-            }// while
-
-        }// for
-
-    }//printInstructions()
-
-    //DO NOT call this directly, go through Sysout
-    public void displayMessage( String messageIn )
-    {
-        messageText.append( messageIn + "\n" );
-        System.out.println(messageIn);
-    }
-
-}// TestDialog  class
--- openjdk.orig/jdk/test/java/awt/Focus/NonFocusableWindowTest/NonfocusableOwnerTest.java	2010-04-15 09:35:54.000000000 +0200
+++ openjdk/jdk/test/java/awt/Focus/NonFocusableWindowTest/NonfocusableOwnerTest.java	2010-05-03 09:35:54.000000000 +0200
@@ -25,8 +25,10 @@
   @test
   @bug       6182359
   @summary   Tests that Window having non-focusable owner can't be a focus owner.
-  @author    Anton Tarasov: area=awt.focus
-  @run       applet NonfocusableOwnerTest.html
+  @author    Anton.Tarasov: area=awt.focus
+  @library   ../../regtesthelpers
+  @build     Util
+  @run       main NonfocusableOwnerTest
 */
 
 import java.awt.*;
@@ -34,319 +36,124 @@
 import java.applet.Applet;
 import java.lang.reflect.*;
 import java.io.*;
+import test.java.awt.regtesthelpers.Util;
 
 public class NonfocusableOwnerTest extends Applet {
-    Robot robot;
+    Robot robot = Util.createRobot();
     Frame frame;
     Dialog dialog;
     Window window1;
     Window window2;
     Button button = new Button("button");
-//    PrintStream Sysout = System.out;
 
     public static void main(String[] args) {
         NonfocusableOwnerTest test = new NonfocusableOwnerTest();
-        test.init();
         test.start();
     }
 
-    public void init() {
-        try {
-            robot = new Robot();
-        } catch (AWTException e) {
-            throw new RuntimeException("Error: unable to create robot", e);
-        }
-        // Create instructions for the user here, as well as set up
-        // the environment -- set the layout manager, add buttons,
-        // etc.
-        this.setLayout (new BorderLayout ());
-    }
-
     public void start() {
         Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {
                 public void eventDispatched(AWTEvent e) {
-                    Sysout.println(e.toString());
+                    System.out.println(e.toString());
                 }
             }, FocusEvent.FOCUS_EVENT_MASK | WindowEvent.WINDOW_FOCUS_EVENT_MASK | WindowEvent.WINDOW_EVENT_MASK);
 
         frame = new Frame("Frame");
         frame.setName("Frame-owner");
+        frame.setBounds(100, 0, 100, 100);
         dialog = new Dialog(frame, "Dialog");
         dialog.setName("Dialog-owner");
+        dialog.setBounds(100, 0, 100, 100);
 
         window1 = new Window(frame);
         window1.setName("1st child");
+        window1.setBounds(100, 300, 100, 100);
         window2 = new Window(window1);
         window2.setName("2nd child");
+        window2.setBounds(100, 500, 100, 100);
 
         test1(frame, window1);
         test2(frame, window1, window2);
         test3(frame, window1, window2);
 
         window1 = new Window(dialog);
+        window1.setBounds(100, 300, 100, 100);
         window1.setName("1st child");
         window2 = new Window(window1);
         window2.setName("2nd child");
+        window2.setBounds(100, 500, 100, 100);
 
         test1(dialog, window1);
         test2(dialog, window1, window2);
         test3(dialog, window1, window2);
 
-        Sysout.println("Test passed.");
+        System.out.println("Test passed.");
     }
 
     void test1(Window owner, Window child) {
-        Sysout.println("* * * STAGE 1 * * *\nowner=" + owner);
+        System.out.println("* * * STAGE 1 * * *\nWindow owner: " + owner);
 
         owner.setFocusableWindowState(false);
-        owner.setSize(100, 100);
         owner.setVisible(true);
 
         child.add(button);
-        child.setBounds(0, 300, 100, 100);
         child.setVisible(true);
 
-        waitTillShown(child);
+        Util.waitTillShown(child);
 
-        clickOn(button);
+        Util.clickOnComp(button, robot);
         if (button == KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()) {
             throw new RuntimeException("Test Failed.");
         }
-        owner.dispose();
         child.dispose();
+        owner.dispose();
     }
 
     void test2(Window owner, Window child1, Window child2) {
-        Sysout.println("* * * STAGE 2 * * *\nowner=" + owner);
+        System.out.println("* * * STAGE 2 * * *\nWindow nowner: " + owner);
 
         owner.setFocusableWindowState(false);
-        owner.setSize(100, 100);
         owner.setVisible(true);
 
         child1.setFocusableWindowState(true);
-        child1.setBounds(0, 300, 100, 100);
         child1.setVisible(true);
 
         child2.add(button);
-        child2.setBounds(0, 500, 100, 100);
         child2.setVisible(true);
 
-        clickOn(button);
+        Util.waitTillShown(child2);
+
+        Util.clickOnComp(button, robot);
         if (button == KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()) {
             throw new RuntimeException("Test failed.");
         }
-        owner.dispose();
-        child1.dispose();
         child2.dispose();
+        child1.dispose();
+        owner.dispose();
     }
 
     void test3(Window owner, Window child1, Window child2) {
-        Sysout.println("* * * STAGE 3 * * *\nowner=" + owner);
+        System.out.println("* * * STAGE 3 * * *\nWidow owner: " + owner);
 
         owner.setFocusableWindowState(true);
-        owner.setSize(100, 100);
         owner.setVisible(true);
 
         child1.setFocusableWindowState(false);
-        child1.setBounds(0, 300, 100, 100);
         child1.setVisible(true);
 
         child2.setFocusableWindowState(true);
         child2.add(button);
-        child2.setBounds(0, 500, 100, 100);
         child2.setVisible(true);
 
-        clickOn(button);
+        Util.waitTillShown(child2);
 
+        Util.clickOnComp(button, robot);
         System.err.println("focus owner: " + KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner());
         if (button != KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()) {
             throw new RuntimeException("Test failed.");
         }
-        owner.dispose();
         child1.dispose();
         child2.dispose();
-    }
-
-    void clickOn(Component c) {
-        Point p = c.getLocationOnScreen();
-        Dimension d = c.getSize();
-
-        Sysout.println("Clicking " + c);
-
-        if (c instanceof Frame) {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + ((Frame)c).getInsets().top/2);
-        } else {
-            robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + (int)(d.getHeight()/2));
-        }
-        robot.mousePress(InputEvent.BUTTON1_MASK);
-        robot.mouseRelease(InputEvent.BUTTON1_MASK);
-        waitForIdle();
-    }
-
-    void waitTillShown(Component c) {
-        while (true) {
-            try {
-                Thread.sleep(100);
-                c.getLocationOnScreen();
-                break;
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            } catch (IllegalComponentStateException e) {}
-        }
-    }
-    void waitForIdle() {
-        try {
-            Toolkit.getDefaultToolkit().sync();
-            sun.awt.SunToolkit.flushPendingEvents();
-            EventQueue.invokeAndWait( new Runnable() {
-                    public void run() {} // Dummy implementation
-                });
-        } catch(InterruptedException ie) {
-            Sysout.println("waitForIdle, non-fatal exception caught:");
-            ie.printStackTrace();
-        } catch(InvocationTargetException ite) {
-            Sysout.println("waitForIdle, non-fatal exception caught:");
-            ite.printStackTrace();
-        }
-
-        // wait longer...
-        robot.delay(200);
+        owner.dispose();
     }
 }
-
-/****************************************************
- Standard Test Machinery
- DO NOT modify anything below -- it's a standard
-  chunk of code whose purpose is to make user
-  interaction uniform, and thereby make it simpler
-  to read and understand someone else's test.
- ****************************************************/
-
-/**
- This is part of the standard test machinery.
- It creates a dialog (with the instructions), and is the interface
-  for sending text messages to the user.
- To print the instructions, send an array of strings to Sysout.createDialog
-  WithInstructions method.  Put one line of instructions per array entry.
- To display a message for the tester to see, simply call Sysout.println
-  with the string to be displayed.
- This mimics System.out.println but works within the test harness as well
-  as standalone.
- */
-
-class Sysout
-{
-    static TestDialog dialog;
-
-    public static void createDialogWithInstructions( String[] instructions )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        dialog.printInstructions( instructions );
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-    public static void createDialog( )
-    {
-        dialog = new TestDialog( new Frame(), "Instructions" );
-        String[] defInstr = { "Instructions will appear here. ", "" } ;
-        dialog.printInstructions( defInstr );
-        dialog.setVisible(true);
-        println( "Any messages for the tester will display here." );
-    }
-
-
-    public static void printInstructions( String[] instructions )
-    {
-        dialog.printInstructions( instructions );
-    }
-
-
-    public static void println( String messageIn )
-    {
-        System.err.println(messageIn);
-    }
-
-}// Sysout  class
-
-/**
-  This is part of the standard test machinery.  It provides a place for the
-   test instructions to be displayed, and a place for interactive messages
-   to the user to be displayed.
-  To have the test instructions displayed, see Sysout.
-  To have a message to the user be displayed, see Sysout.
-  Do not call anything in this dialog directly.
-  */
-class TestDialog extends Dialog
-{
-
-    TextArea instructionsText;
-    TextArea messageText;
-    int maxStringLength = 80;
-
-    //DO NOT call this directly, go through Sysout
-    public TestDialog( Frame frame, String name )
-    {
-        super( frame, name );
-        int scrollBoth = TextArea.SCROLLBARS_BOTH;
-        instructionsText = new TextArea( "", 15, maxStringLength, scrollBoth );
-        add( "North", instructionsText );
-
-        messageText = new TextArea( "", 5, maxStringLength, scrollBoth );
-        add("Center", messageText);
-
-        pack();
-
-        setVisible(true);
-    }// TestDialog()
-
-    //DO NOT call this directly, go through Sysout
-    public void printInstructions( String[] instructions )
-    {
-        //Clear out any current instructions
-        instructionsText.setText( "" );
-
-        //Go down array of instruction strings
-
-        String printStr, remainingStr;
-        for( int i=0; i < instructions.length; i++ )
-        {
-            //chop up each into pieces maxSringLength long
-            remainingStr = instructions[ i ];
-            while( remainingStr.length() > 0 )
-            {
-                //if longer than max then chop off first max chars to print
-                if( remainingStr.length() >= maxStringLength )
-                {
-                    //Try to chop on a word boundary
-                    int posOfSpace = remainingStr.
-                        lastIndexOf( ' ', maxStringLength - 1 );
-
-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;
-
-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );
-                    remainingStr = remainingStr.substring( posOfSpace + 1 );
-                }
-                //else just print
-                else
-                {
-                    printStr = remainingStr;
-                    remainingStr = "";
-                }
-
-                instructionsText.append( printStr + "\n" );
-
-            }// while
-
-        }// for
-
-    }//printInstructions()
-
-    //DO NOT call this directly, go through Sysout
-    public void displayMessage( String messageIn )
-    {
-        messageText.append( messageIn + "\n" );
-        System.out.println(messageIn);
-    }
-
-}// TestDialog  class
